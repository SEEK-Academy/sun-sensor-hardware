// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sun_sensor_data.proto
// Protobuf C++ Version: 6.31.0

#include "sun_sensor_data.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seek {
namespace sun_sensor {
namespace v1 {

inline constexpr SunSensorData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        unit_vector_x_{0},
        unit_vector_y_{0},
        unit_vector_z_{0},
        std_deviation_{0},
        error_code_{static_cast< ::seek::sun_sensor::v1::ErrorCode >(0)},
        crc32_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SunSensorData::SunSensorData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SunSensorData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SunSensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SunSensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SunSensorDataDefaultTypeInternal() {}
  union {
    SunSensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SunSensorDataDefaultTypeInternal _SunSensorData_default_instance_;
}  // namespace v1
}  // namespace sun_sensor
}  // namespace seek
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sun_5fsensor_5fdata_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sun_5fsensor_5fdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_sun_5fsensor_5fdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.unit_vector_x_),
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.unit_vector_y_),
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.unit_vector_z_),
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.std_deviation_),
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.error_code_),
        PROTOBUF_FIELD_OFFSET(::seek::sun_sensor::v1::SunSensorData, _impl_.crc32_),
        0,
        1,
        2,
        3,
        4,
        5,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::seek::sun_sensor::v1::SunSensorData)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::seek::sun_sensor::v1::_SunSensorData_default_instance_._instance,
};
const char descriptor_table_protodef_sun_5fsensor_5fdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025sun_sensor_data.proto\022\022seek.sun_sensor"
    ".v1\"\255\001\n\rSunSensorData\022\025\n\runit_vector_x\030\001"
    " \001(\002\022\025\n\runit_vector_y\030\002 \001(\002\022\025\n\runit_vect"
    "or_z\030\003 \001(\002\022\025\n\rstd_deviation\030\004 \001(\002\0221\n\nerr"
    "or_code\030\005 \001(\0162\035.seek.sun_sensor.v1.Error"
    "Code\022\r\n\005crc32\030\006 \001(\r*q\n\tErrorCode\022\006\n\002OK\020\000"
    "\022\027\n\023SENSOR_READ_FAILURE\020\001\022\025\n\021COMPUTATION"
    "_ERROR\020\002\022\031\n\025COMMUNICATION_TIMEOUT\020\003\022\021\n\rU"
    "NKNOWN_ERROR\020\004b\006proto3"
};
static ::absl::once_flag descriptor_table_sun_5fsensor_5fdata_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sun_5fsensor_5fdata_2eproto = {
    false,
    false,
    342,
    descriptor_table_protodef_sun_5fsensor_5fdata_2eproto,
    "sun_sensor_data.proto",
    &descriptor_table_sun_5fsensor_5fdata_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_sun_5fsensor_5fdata_2eproto::offsets,
    file_level_enum_descriptors_sun_5fsensor_5fdata_2eproto,
    file_level_service_descriptors_sun_5fsensor_5fdata_2eproto,
};
namespace seek {
namespace sun_sensor {
namespace v1 {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sun_5fsensor_5fdata_2eproto);
  return file_level_enum_descriptors_sun_5fsensor_5fdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCode_internal_data_[] = {
    327680u, 0u, };
// ===================================================================

class SunSensorData::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<SunSensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_._has_bits_);
};

SunSensorData::SunSensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SunSensorData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seek.sun_sensor.v1.SunSensorData)
}
SunSensorData::SunSensorData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SunSensorData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SunSensorData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE SunSensorData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SunSensorData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unit_vector_x_),
           0,
           offsetof(Impl_, crc32_) -
               offsetof(Impl_, unit_vector_x_) +
               sizeof(Impl_::crc32_));
}
SunSensorData::~SunSensorData() {
  // @@protoc_insertion_point(destructor:seek.sun_sensor.v1.SunSensorData)
  SharedDtor(*this);
}
inline void SunSensorData::SharedDtor(MessageLite& self) {
  SunSensorData& this_ = static_cast<SunSensorData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SunSensorData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SunSensorData(arena);
}
constexpr auto SunSensorData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SunSensorData),
                                            alignof(SunSensorData));
}
constexpr auto SunSensorData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SunSensorData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SunSensorData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SunSensorData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SunSensorData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SunSensorData>(), &SunSensorData::ByteSizeLong,
              &SunSensorData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_._cached_size_),
          false,
      },
      &SunSensorData::kDescriptorMethods,
      &descriptor_table_sun_5fsensor_5fdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SunSensorData_class_data_ =
        SunSensorData::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
SunSensorData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SunSensorData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SunSensorData_class_data_.tc_table);
  return SunSensorData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
SunSensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SunSensorData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seek::sun_sensor::v1::SunSensorData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float unit_vector_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_x_)}},
    // float unit_vector_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_y_)}},
    // float unit_vector_z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_z_)}},
    // float std_deviation = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.std_deviation_)}},
    // .seek.sun_sensor.v1.ErrorCode error_code = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SunSensorData, _impl_.error_code_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.error_code_)}},
    // uint32 crc32 = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SunSensorData, _impl_.crc32_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.crc32_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float unit_vector_x = 1;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float unit_vector_y = 2;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float unit_vector_z = 3;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float std_deviation = 4;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.std_deviation_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .seek.sun_sensor.v1.ErrorCode error_code = 5;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.error_code_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 crc32 = 6;
    {PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.crc32_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void SunSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:seek.sun_sensor.v1.SunSensorData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    ::memset(&_impl_.unit_vector_x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.crc32_) -
        reinterpret_cast<char*>(&_impl_.unit_vector_x_)) + sizeof(_impl_.crc32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SunSensorData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SunSensorData& this_ = static_cast<const SunSensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SunSensorData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SunSensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seek.sun_sensor.v1.SunSensorData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float unit_vector_x = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_x()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          1, this_._internal_unit_vector_x(), target);
    }
  }

  // float unit_vector_y = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_y()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_unit_vector_y(), target);
    }
  }

  // float unit_vector_z = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_z()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_unit_vector_z(), target);
    }
  }

  // float std_deviation = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_std_deviation()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_std_deviation(), target);
    }
  }

  // .seek.sun_sensor.v1.ErrorCode error_code = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_error_code(), target);
    }
  }

  // uint32 crc32 = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_crc32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_crc32(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seek.sun_sensor.v1.SunSensorData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SunSensorData::ByteSizeLong(const MessageLite& base) {
  const SunSensorData& this_ = static_cast<const SunSensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SunSensorData::ByteSizeLong() const {
  const SunSensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seek.sun_sensor.v1.SunSensorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // float unit_vector_x = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_x()) != 0) {
        total_size += 5;
      }
    }
    // float unit_vector_y = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_y()) != 0) {
        total_size += 5;
      }
    }
    // float unit_vector_z = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_unit_vector_z()) != 0) {
        total_size += 5;
      }
    }
    // float std_deviation = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_std_deviation()) != 0) {
        total_size += 5;
      }
    }
    // .seek.sun_sensor.v1.ErrorCode error_code = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
    // uint32 crc32 = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_crc32() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_crc32());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SunSensorData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SunSensorData*>(&to_msg);
  auto& from = static_cast<const SunSensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seek.sun_sensor.v1.SunSensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_unit_vector_x()) != 0) {
        _this->_impl_.unit_vector_x_ = from._impl_.unit_vector_x_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_unit_vector_y()) != 0) {
        _this->_impl_.unit_vector_y_ = from._impl_.unit_vector_y_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_unit_vector_z()) != 0) {
        _this->_impl_.unit_vector_z_ = from._impl_.unit_vector_z_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_std_deviation()) != 0) {
        _this->_impl_.std_deviation_ = from._impl_.std_deviation_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_crc32() != 0) {
        _this->_impl_.crc32_ = from._impl_.crc32_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SunSensorData::CopyFrom(const SunSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seek.sun_sensor.v1.SunSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SunSensorData::InternalSwap(SunSensorData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.crc32_)
      + sizeof(SunSensorData::_impl_.crc32_)
      - PROTOBUF_FIELD_OFFSET(SunSensorData, _impl_.unit_vector_x_)>(
          reinterpret_cast<char*>(&_impl_.unit_vector_x_),
          reinterpret_cast<char*>(&other->_impl_.unit_vector_x_));
}

::google::protobuf::Metadata SunSensorData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sun_sensor
}  // namespace seek
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sun_5fsensor_5fdata_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
