// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sun_sensor_data.proto
// Protobuf C++ Version: 6.31.0

#ifndef sun_5fsensor_5fdata_2eproto_2epb_2eh
#define sun_5fsensor_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sun_5fsensor_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sun_5fsensor_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sun_5fsensor_5fdata_2eproto;
}  // extern "C"
namespace seek {
namespace sun_sensor {
namespace v1 {
enum ErrorCode : int;
extern const uint32_t ErrorCode_internal_data_[];
class SunSensorData;
struct SunSensorDataDefaultTypeInternal;
extern SunSensorDataDefaultTypeInternal _SunSensorData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SunSensorData_class_data_;
}  // namespace v1
}  // namespace sun_sensor
}  // namespace seek
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::seek::sun_sensor::v1::ErrorCode_internal_data_>
    internal::EnumTraitsImpl::value<::seek::sun_sensor::v1::ErrorCode>;
}  // namespace protobuf
}  // namespace google

namespace seek {
namespace sun_sensor {
namespace v1 {
enum ErrorCode : int {
  OK = 0,
  SENSOR_READ_FAILURE = 1,
  COMPUTATION_ERROR = 2,
  COMMUNICATION_TIMEOUT = 3,
  UNKNOWN_ERROR = 4,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ErrorCode_internal_data_[];
inline constexpr ErrorCode ErrorCode_MIN =
    static_cast<ErrorCode>(0);
inline constexpr ErrorCode ErrorCode_MAX =
    static_cast<ErrorCode>(4);
inline bool ErrorCode_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int ErrorCode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ErrorCode_descriptor();
template <typename T>
const ::std::string& ErrorCode_Name(T value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ErrorCode_Name(static_cast<ErrorCode>(value));
}
template <>
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ErrorCode_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool ErrorCode_Parse(
    ::absl::string_view name, ErrorCode* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(ErrorCode_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class SunSensorData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seek.sun_sensor.v1.SunSensorData) */ {
 public:
  inline SunSensorData() : SunSensorData(nullptr) {}
  ~SunSensorData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SunSensorData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SunSensorData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SunSensorData(::google::protobuf::internal::ConstantInitialized);

  inline SunSensorData(const SunSensorData& from) : SunSensorData(nullptr, from) {}
  inline SunSensorData(SunSensorData&& from) noexcept
      : SunSensorData(nullptr, ::std::move(from)) {}
  inline SunSensorData& operator=(const SunSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SunSensorData& operator=(SunSensorData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SunSensorData& default_instance() {
    return *reinterpret_cast<const SunSensorData*>(
        &_SunSensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SunSensorData& a, SunSensorData& b) { a.Swap(&b); }
  inline void Swap(SunSensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SunSensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SunSensorData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SunSensorData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SunSensorData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SunSensorData& from) { SunSensorData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SunSensorData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seek.sun_sensor.v1.SunSensorData"; }

 protected:
  explicit SunSensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SunSensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SunSensorData& from);
  SunSensorData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SunSensorData&& from) noexcept
      : SunSensorData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUnitVectorXFieldNumber = 1,
    kUnitVectorYFieldNumber = 2,
    kUnitVectorZFieldNumber = 3,
    kStdDeviationFieldNumber = 4,
    kErrorCodeFieldNumber = 5,
    kCrc32FieldNumber = 6,
  };
  // float unit_vector_x = 1;
  void clear_unit_vector_x() ;
  float unit_vector_x() const;
  void set_unit_vector_x(float value);

  private:
  float _internal_unit_vector_x() const;
  void _internal_set_unit_vector_x(float value);

  public:
  // float unit_vector_y = 2;
  void clear_unit_vector_y() ;
  float unit_vector_y() const;
  void set_unit_vector_y(float value);

  private:
  float _internal_unit_vector_y() const;
  void _internal_set_unit_vector_y(float value);

  public:
  // float unit_vector_z = 3;
  void clear_unit_vector_z() ;
  float unit_vector_z() const;
  void set_unit_vector_z(float value);

  private:
  float _internal_unit_vector_z() const;
  void _internal_set_unit_vector_z(float value);

  public:
  // float std_deviation = 4;
  void clear_std_deviation() ;
  float std_deviation() const;
  void set_std_deviation(float value);

  private:
  float _internal_std_deviation() const;
  void _internal_set_std_deviation(float value);

  public:
  // .seek.sun_sensor.v1.ErrorCode error_code = 5;
  void clear_error_code() ;
  ::seek::sun_sensor::v1::ErrorCode error_code() const;
  void set_error_code(::seek::sun_sensor::v1::ErrorCode value);

  private:
  ::seek::sun_sensor::v1::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::seek::sun_sensor::v1::ErrorCode value);

  public:
  // uint32 crc32 = 6;
  void clear_crc32() ;
  ::uint32_t crc32() const;
  void set_crc32(::uint32_t value);

  private:
  ::uint32_t _internal_crc32() const;
  void _internal_set_crc32(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seek.sun_sensor.v1.SunSensorData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SunSensorData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float unit_vector_x_;
    float unit_vector_y_;
    float unit_vector_z_;
    float std_deviation_;
    int error_code_;
    ::uint32_t crc32_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sun_5fsensor_5fdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SunSensorData_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SunSensorData

// float unit_vector_x = 1;
inline void SunSensorData::clear_unit_vector_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SunSensorData::unit_vector_x() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.unit_vector_x)
  return _internal_unit_vector_x();
}
inline void SunSensorData::set_unit_vector_x(float value) {
  _internal_set_unit_vector_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.unit_vector_x)
}
inline float SunSensorData::_internal_unit_vector_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_vector_x_;
}
inline void SunSensorData::_internal_set_unit_vector_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_x_ = value;
}

// float unit_vector_y = 2;
inline void SunSensorData::clear_unit_vector_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SunSensorData::unit_vector_y() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.unit_vector_y)
  return _internal_unit_vector_y();
}
inline void SunSensorData::set_unit_vector_y(float value) {
  _internal_set_unit_vector_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.unit_vector_y)
}
inline float SunSensorData::_internal_unit_vector_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_vector_y_;
}
inline void SunSensorData::_internal_set_unit_vector_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_y_ = value;
}

// float unit_vector_z = 3;
inline void SunSensorData::clear_unit_vector_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SunSensorData::unit_vector_z() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.unit_vector_z)
  return _internal_unit_vector_z();
}
inline void SunSensorData::set_unit_vector_z(float value) {
  _internal_set_unit_vector_z(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.unit_vector_z)
}
inline float SunSensorData::_internal_unit_vector_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_vector_z_;
}
inline void SunSensorData::_internal_set_unit_vector_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_vector_z_ = value;
}

// float std_deviation = 4;
inline void SunSensorData::clear_std_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.std_deviation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SunSensorData::std_deviation() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.std_deviation)
  return _internal_std_deviation();
}
inline void SunSensorData::set_std_deviation(float value) {
  _internal_set_std_deviation(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.std_deviation)
}
inline float SunSensorData::_internal_std_deviation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.std_deviation_;
}
inline void SunSensorData::_internal_set_std_deviation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.std_deviation_ = value;
}

// .seek.sun_sensor.v1.ErrorCode error_code = 5;
inline void SunSensorData::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::seek::sun_sensor::v1::ErrorCode SunSensorData::error_code() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.error_code)
  return _internal_error_code();
}
inline void SunSensorData::set_error_code(::seek::sun_sensor::v1::ErrorCode value) {
  _internal_set_error_code(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.error_code)
}
inline ::seek::sun_sensor::v1::ErrorCode SunSensorData::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seek::sun_sensor::v1::ErrorCode>(_impl_.error_code_);
}
inline void SunSensorData::_internal_set_error_code(::seek::sun_sensor::v1::ErrorCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = value;
}

// uint32 crc32 = 6;
inline void SunSensorData::clear_crc32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crc32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SunSensorData::crc32() const {
  // @@protoc_insertion_point(field_get:seek.sun_sensor.v1.SunSensorData.crc32)
  return _internal_crc32();
}
inline void SunSensorData::set_crc32(::uint32_t value) {
  _internal_set_crc32(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:seek.sun_sensor.v1.SunSensorData.crc32)
}
inline ::uint32_t SunSensorData::_internal_crc32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crc32_;
}
inline void SunSensorData::_internal_set_crc32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crc32_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sun_sensor
}  // namespace seek


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seek::sun_sensor::v1::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::seek::sun_sensor::v1::ErrorCode>() {
  return ::seek::sun_sensor::v1::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sun_5fsensor_5fdata_2eproto_2epb_2eh
