// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sun_sensor_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Seek.SunSensor.V1 {

  /// <summary>Holder for reflection information generated from sun_sensor_data.proto</summary>
  public static partial class SunSensorDataReflection {

    #region Descriptor
    /// <summary>File descriptor for sun_sensor_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SunSensorDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVzdW5fc2Vuc29yX2RhdGEucHJvdG8SEnNlZWsuc3VuX3NlbnNvci52MSKt",
            "AQoNU3VuU2Vuc29yRGF0YRIVCg11bml0X3ZlY3Rvcl94GAEgASgCEhUKDXVu",
            "aXRfdmVjdG9yX3kYAiABKAISFQoNdW5pdF92ZWN0b3JfehgDIAEoAhIVCg1z",
            "dGRfZGV2aWF0aW9uGAQgASgCEjEKCmVycm9yX2NvZGUYBSABKA4yHS5zZWVr",
            "LnN1bl9zZW5zb3IudjEuRXJyb3JDb2RlEg0KBWNyYzMyGAYgASgNKnEKCUVy",
            "cm9yQ29kZRIGCgJPSxAAEhcKE1NFTlNPUl9SRUFEX0ZBSUxVUkUQARIVChFD",
            "T01QVVRBVElPTl9FUlJPUhACEhkKFUNPTU1VTklDQVRJT05fVElNRU9VVBAD",
            "EhEKDVVOS05PV05fRVJST1IQBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Seek.SunSensor.V1.ErrorCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Seek.SunSensor.V1.SunSensorData), global::Seek.SunSensor.V1.SunSensorData.Parser, new[]{ "UnitVectorX", "UnitVectorY", "UnitVectorZ", "StdDeviation", "ErrorCode", "Crc32" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ErrorCode {
    [pbr::OriginalName("OK")] Ok = 0,
    /// <summary>
    /// Failure reading data from photoresistors
    /// </summary>
    [pbr::OriginalName("SENSOR_READ_FAILURE")] SensorReadFailure = 1,
    /// <summary>
    /// Error during data computation (e.g., angle calculations)
    /// </summary>
    [pbr::OriginalName("COMPUTATION_ERROR")] ComputationError = 2,
    /// <summary>
    /// Communication timeout or failure
    /// </summary>
    [pbr::OriginalName("COMMUNICATION_TIMEOUT")] CommunicationTimeout = 3,
    /// <summary>
    /// An unknown error occurred
    /// </summary>
    [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 4,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SunSensorData : pb::IMessage<SunSensorData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SunSensorData> _parser = new pb::MessageParser<SunSensorData>(() => new SunSensorData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SunSensorData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Seek.SunSensor.V1.SunSensorDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SunSensorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SunSensorData(SunSensorData other) : this() {
      unitVectorX_ = other.unitVectorX_;
      unitVectorY_ = other.unitVectorY_;
      unitVectorZ_ = other.unitVectorZ_;
      stdDeviation_ = other.stdDeviation_;
      errorCode_ = other.errorCode_;
      crc32_ = other.crc32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SunSensorData Clone() {
      return new SunSensorData(this);
    }

    /// <summary>Field number for the "unit_vector_x" field.</summary>
    public const int UnitVectorXFieldNumber = 1;
    private float unitVectorX_;
    /// <summary>
    /// Normalized direction vector components
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UnitVectorX {
      get { return unitVectorX_; }
      set {
        unitVectorX_ = value;
      }
    }

    /// <summary>Field number for the "unit_vector_y" field.</summary>
    public const int UnitVectorYFieldNumber = 2;
    private float unitVectorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UnitVectorY {
      get { return unitVectorY_; }
      set {
        unitVectorY_ = value;
      }
    }

    /// <summary>Field number for the "unit_vector_z" field.</summary>
    public const int UnitVectorZFieldNumber = 3;
    private float unitVectorZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UnitVectorZ {
      get { return unitVectorZ_; }
      set {
        unitVectorZ_ = value;
      }
    }

    /// <summary>Field number for the "std_deviation" field.</summary>
    public const int StdDeviationFieldNumber = 4;
    private float stdDeviation_;
    /// <summary>
    /// Standard deviation of the measurement in radians
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StdDeviation {
      get { return stdDeviation_; }
      set {
        stdDeviation_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 5;
    private global::Seek.SunSensor.V1.ErrorCode errorCode_ = global::Seek.SunSensor.V1.ErrorCode.Ok;
    /// <summary>
    /// Error code indicating SunSensor status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Seek.SunSensor.V1.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "crc32" field.</summary>
    public const int Crc32FieldNumber = 6;
    private uint crc32_;
    /// <summary>
    /// CRC32 checksum computed over the serialized payload excluding this field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Crc32 {
      get { return crc32_; }
      set {
        crc32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SunSensorData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SunSensorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnitVectorX, other.UnitVectorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnitVectorY, other.UnitVectorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnitVectorZ, other.UnitVectorZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StdDeviation, other.StdDeviation)) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Crc32 != other.Crc32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitVectorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnitVectorX);
      if (UnitVectorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnitVectorY);
      if (UnitVectorZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnitVectorZ);
      if (StdDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StdDeviation);
      if (ErrorCode != global::Seek.SunSensor.V1.ErrorCode.Ok) hash ^= ErrorCode.GetHashCode();
      if (Crc32 != 0) hash ^= Crc32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UnitVectorX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(UnitVectorX);
      }
      if (UnitVectorY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(UnitVectorY);
      }
      if (UnitVectorZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(UnitVectorZ);
      }
      if (StdDeviation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StdDeviation);
      }
      if (ErrorCode != global::Seek.SunSensor.V1.ErrorCode.Ok) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ErrorCode);
      }
      if (Crc32 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Crc32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UnitVectorX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(UnitVectorX);
      }
      if (UnitVectorY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(UnitVectorY);
      }
      if (UnitVectorZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(UnitVectorZ);
      }
      if (StdDeviation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StdDeviation);
      }
      if (ErrorCode != global::Seek.SunSensor.V1.ErrorCode.Ok) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ErrorCode);
      }
      if (Crc32 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Crc32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UnitVectorX != 0F) {
        size += 1 + 4;
      }
      if (UnitVectorY != 0F) {
        size += 1 + 4;
      }
      if (UnitVectorZ != 0F) {
        size += 1 + 4;
      }
      if (StdDeviation != 0F) {
        size += 1 + 4;
      }
      if (ErrorCode != global::Seek.SunSensor.V1.ErrorCode.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Crc32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Crc32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SunSensorData other) {
      if (other == null) {
        return;
      }
      if (other.UnitVectorX != 0F) {
        UnitVectorX = other.UnitVectorX;
      }
      if (other.UnitVectorY != 0F) {
        UnitVectorY = other.UnitVectorY;
      }
      if (other.UnitVectorZ != 0F) {
        UnitVectorZ = other.UnitVectorZ;
      }
      if (other.StdDeviation != 0F) {
        StdDeviation = other.StdDeviation;
      }
      if (other.ErrorCode != global::Seek.SunSensor.V1.ErrorCode.Ok) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Crc32 != 0) {
        Crc32 = other.Crc32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            UnitVectorX = input.ReadFloat();
            break;
          }
          case 21: {
            UnitVectorY = input.ReadFloat();
            break;
          }
          case 29: {
            UnitVectorZ = input.ReadFloat();
            break;
          }
          case 37: {
            StdDeviation = input.ReadFloat();
            break;
          }
          case 40: {
            ErrorCode = (global::Seek.SunSensor.V1.ErrorCode) input.ReadEnum();
            break;
          }
          case 48: {
            Crc32 = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            UnitVectorX = input.ReadFloat();
            break;
          }
          case 21: {
            UnitVectorY = input.ReadFloat();
            break;
          }
          case 29: {
            UnitVectorZ = input.ReadFloat();
            break;
          }
          case 37: {
            StdDeviation = input.ReadFloat();
            break;
          }
          case 40: {
            ErrorCode = (global::Seek.SunSensor.V1.ErrorCode) input.ReadEnum();
            break;
          }
          case 48: {
            Crc32 = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
